//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Acknowledgements.plist`.
    static let acknowledgementsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Acknowledgements", pathExtension: "plist")
    /// Resource file `GoogleService-Info-Debug.plist`.
    static let googleServiceInfoDebugPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info-Debug", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Acknowledgements", withExtension: "plist")`
    static func acknowledgementsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.acknowledgementsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info-Debug", withExtension: "plist")`
    static func googleServiceInfoDebugPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoDebugPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 42 images.
  struct image {
    /// Image `about_house_10`.
    static let about_house_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_10")
    /// Image `about_house_11`.
    static let about_house_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_11")
    /// Image `about_house_12`.
    static let about_house_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_12")
    /// Image `about_house_13`.
    static let about_house_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_13")
    /// Image `about_house_14`.
    static let about_house_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_14")
    /// Image `about_house_15`.
    static let about_house_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_15")
    /// Image `about_house_1`.
    static let about_house_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_1")
    /// Image `about_house_2`.
    static let about_house_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_2")
    /// Image `about_house_3`.
    static let about_house_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_3")
    /// Image `about_house_4`.
    static let about_house_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_4")
    /// Image `about_house_5`.
    static let about_house_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_5")
    /// Image `about_house_6`.
    static let about_house_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_6")
    /// Image `about_house_7`.
    static let about_house_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_7")
    /// Image `about_house_8`.
    static let about_house_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_8")
    /// Image `about_house_9`.
    static let about_house_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_house_9")
    /// Image `buttonDialogClose`.
    static let buttonDialogClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonDialogClose")
    /// Image `creditcardCmp`.
    static let creditcardCmp = Rswift.ImageResource(bundle: R.hostingBundle, name: "creditcardCmp")
    /// Image `icDefaultDog`.
    static let icDefaultDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "icDefaultDog")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_default_usericon`.
    static let ic_default_usericon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_default_usericon")
    /// Image `ic_navbar_others`.
    static let ic_navbar_others = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_navbar_others")
    /// Image `ic_notice`.
    static let ic_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notice")
    /// Image `ic_review_star_fill`.
    static let ic_review_star_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_review_star_fill")
    /// Image `ic_review_star`.
    static let ic_review_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_review_star")
    /// Image `ic_tab_keep_active`.
    static let ic_tab_keep_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_keep_active")
    /// Image `ic_tab_keep`.
    static let ic_tab_keep = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_keep")
    /// Image `ic_tab_leave_active`.
    static let ic_tab_leave_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_leave_active")
    /// Image `ic_tab_leave`.
    static let ic_tab_leave = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_leave")
    /// Image `ic_tab_others_active`.
    static let ic_tab_others_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_others_active")
    /// Image `ic_tab_others`.
    static let ic_tab_others = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_others")
    /// Image `ic_tab_search_active`.
    static let ic_tab_search_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_search_active")
    /// Image `ic_tab_search`.
    static let ic_tab_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_search")
    /// Image `ic_tab_task_active`.
    static let ic_tab_task_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_task_active")
    /// Image `ic_tab_task`.
    static let ic_tab_task = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_task")
    /// Image `registerDogDialog`.
    static let registerDogDialog = Rswift.ImageResource(bundle: R.hostingBundle, name: "registerDogDialog")
    /// Image `sample_leave_header`.
    static let sample_leave_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "sample_leave_header")
    /// Image `signupBanner`.
    static let signupBanner = Rswift.ImageResource(bundle: R.hostingBundle, name: "signupBanner")
    /// Image `splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")
    /// Image `tag_sample`.
    static let tag_sample = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_sample")
    /// Image `taskPhotoBlank`.
    static let taskPhotoBlank = Rswift.ImageResource(bundle: R.hostingBundle, name: "taskPhotoBlank")
    /// Image `togglePasswordSecurity`.
    static let togglePasswordSecurity = Rswift.ImageResource(bundle: R.hostingBundle, name: "togglePasswordSecurity")
    /// Image `welcome`.
    static let welcome = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome")
    
    /// `UIImage(named: "about_house_1", bundle: ..., traitCollection: ...)`
    static func about_house_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_10", bundle: ..., traitCollection: ...)`
    static func about_house_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_11", bundle: ..., traitCollection: ...)`
    static func about_house_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_12", bundle: ..., traitCollection: ...)`
    static func about_house_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_13", bundle: ..., traitCollection: ...)`
    static func about_house_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_14", bundle: ..., traitCollection: ...)`
    static func about_house_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_15", bundle: ..., traitCollection: ...)`
    static func about_house_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_2", bundle: ..., traitCollection: ...)`
    static func about_house_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_3", bundle: ..., traitCollection: ...)`
    static func about_house_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_4", bundle: ..., traitCollection: ...)`
    static func about_house_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_5", bundle: ..., traitCollection: ...)`
    static func about_house_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_6", bundle: ..., traitCollection: ...)`
    static func about_house_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_7", bundle: ..., traitCollection: ...)`
    static func about_house_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_8", bundle: ..., traitCollection: ...)`
    static func about_house_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_house_9", bundle: ..., traitCollection: ...)`
    static func about_house_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_house_9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "buttonDialogClose", bundle: ..., traitCollection: ...)`
    static func buttonDialogClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonDialogClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "creditcardCmp", bundle: ..., traitCollection: ...)`
    static func creditcardCmp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditcardCmp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icDefaultDog", bundle: ..., traitCollection: ...)`
    static func icDefaultDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDefaultDog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_default_usericon", bundle: ..., traitCollection: ...)`
    static func ic_default_usericon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_default_usericon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_navbar_others", bundle: ..., traitCollection: ...)`
    static func ic_navbar_others(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_navbar_others, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_notice", bundle: ..., traitCollection: ...)`
    static func ic_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_review_star", bundle: ..., traitCollection: ...)`
    static func ic_review_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_review_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_review_star_fill", bundle: ..., traitCollection: ...)`
    static func ic_review_star_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_review_star_fill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_keep", bundle: ..., traitCollection: ...)`
    static func ic_tab_keep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_keep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_keep_active", bundle: ..., traitCollection: ...)`
    static func ic_tab_keep_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_keep_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_leave", bundle: ..., traitCollection: ...)`
    static func ic_tab_leave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_leave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_leave_active", bundle: ..., traitCollection: ...)`
    static func ic_tab_leave_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_leave_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_others", bundle: ..., traitCollection: ...)`
    static func ic_tab_others(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_others, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_others_active", bundle: ..., traitCollection: ...)`
    static func ic_tab_others_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_others_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_search", bundle: ..., traitCollection: ...)`
    static func ic_tab_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_search_active", bundle: ..., traitCollection: ...)`
    static func ic_tab_search_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_search_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_task", bundle: ..., traitCollection: ...)`
    static func ic_tab_task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_task, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tab_task_active", bundle: ..., traitCollection: ...)`
    static func ic_tab_task_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_task_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "registerDogDialog", bundle: ..., traitCollection: ...)`
    static func registerDogDialog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registerDogDialog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sample_leave_header", bundle: ..., traitCollection: ...)`
    static func sample_leave_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sample_leave_header, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signupBanner", bundle: ..., traitCollection: ...)`
    static func signupBanner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signupBanner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tag_sample", bundle: ..., traitCollection: ...)`
    static func tag_sample(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_sample, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "taskPhotoBlank", bundle: ..., traitCollection: ...)`
    static func taskPhotoBlank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taskPhotoBlank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "togglePasswordSecurity", bundle: ..., traitCollection: ...)`
    static func togglePasswordSecurity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.togglePasswordSecurity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome", bundle: ..., traitCollection: ...)`
    static func welcome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 56 nibs.
  struct nib {
    /// Nib `BankAccountCell`.
    static let bankAccountCell = _R.nib._BankAccountCell()
    /// Nib `BookingCell`.
    static let bookingCell = _R.nib._BookingCell()
    /// Nib `CalendarTextFieldCell`.
    static let calendarTextFieldCell = _R.nib._CalendarTextFieldCell()
    /// Nib `CalendarView`.
    static let calendarView = _R.nib._CalendarView()
    /// Nib `ClosedKeepBookingCell`.
    static let closedKeepBookingCell = _R.nib._ClosedKeepBookingCell()
    /// Nib `ClosedLeaveBookingCell`.
    static let closedLeaveBookingCell = _R.nib._ClosedLeaveBookingCell()
    /// Nib `DatePickerTextFieldCell`.
    static let datePickerTextFieldCell = _R.nib._DatePickerTextFieldCell()
    /// Nib `DogProfileCell`.
    static let dogProfileCell = _R.nib._DogProfileCell()
    /// Nib `EditProfileHeaderView`.
    static let editProfileHeaderView = _R.nib._EditProfileHeaderView()
    /// Nib `EmptyView`.
    static let emptyView = _R.nib._EmptyView()
    /// Nib `FooterBtnView`.
    static let footerBtnView = _R.nib._FooterBtnView()
    /// Nib `FooterBtnWithLinkView`.
    static let footerBtnWithLinkView = _R.nib._FooterBtnWithLinkView()
    /// Nib `FooterLinkView`.
    static let footerLinkView = _R.nib._FooterLinkView()
    /// Nib `FooterLoadingView`.
    static let footerLoadingView = _R.nib._FooterLoadingView()
    /// Nib `HorizontalItemCell`.
    static let horizontalItemCell = _R.nib._HorizontalItemCell()
    /// Nib `HorizontalItemInputCell`.
    static let horizontalItemInputCell = _R.nib._HorizontalItemInputCell()
    /// Nib `HorizontalItemSwitchCell`.
    static let horizontalItemSwitchCell = _R.nib._HorizontalItemSwitchCell()
    /// Nib `InputReviewCell`.
    static let inputReviewCell = _R.nib._InputReviewCell()
    /// Nib `KeepBookingDetailView`.
    static let keepBookingDetailView = _R.nib._KeepBookingDetailView()
    /// Nib `LeaveBookingDetailView`.
    static let leaveBookingDetailView = _R.nib._LeaveBookingDetailView()
    /// Nib `MapCell`.
    static let mapCell = _R.nib._MapCell()
    /// Nib `MessageInputView`.
    static let messageInputView = _R.nib._MessageInputView()
    /// Nib `MessageLinkView`.
    static let messageLinkView = _R.nib._MessageLinkView()
    /// Nib `MyMessageCell`.
    static let myMessageCell = _R.nib._MyMessageCell()
    /// Nib `MyMessageImageCell`.
    static let myMessageImageCell = _R.nib._MyMessageImageCell()
    /// Nib `NoticeCell`.
    static let noticeCell = _R.nib._NoticeCell()
    /// Nib `NoticeDetailCell`.
    static let noticeDetailCell = _R.nib._NoticeDetailCell()
    /// Nib `PickerTextFieldCell`.
    static let pickerTextFieldCell = _R.nib._PickerTextFieldCell()
    /// Nib `PickerTextFieldWithSectionCell`.
    static let pickerTextFieldWithSectionCell = _R.nib._PickerTextFieldWithSectionCell()
    /// Nib `PostalCodeHeaderView`.
    static let postalCodeHeaderView = _R.nib._PostalCodeHeaderView()
    /// Nib `ProfileCell`.
    static let profileCell = _R.nib._ProfileCell()
    /// Nib `ProfileHeaderView`.
    static let profileHeaderView = _R.nib._ProfileHeaderView()
    /// Nib `ReviewCell`.
    static let reviewCell = _R.nib._ReviewCell()
    /// Nib `ReviewHeaderView`.
    static let reviewHeaderView = _R.nib._ReviewHeaderView()
    /// Nib `ReviewScoreView`.
    static let reviewScoreView = _R.nib._ReviewScoreView()
    /// Nib `SearchHeaderView`.
    static let searchHeaderView = _R.nib._SearchHeaderView()
    /// Nib `SearchSitterCell`.
    static let searchSitterCell = _R.nib._SearchSitterCell()
    /// Nib `SignUpPromotionCell`.
    static let signUpPromotionCell = _R.nib._SignUpPromotionCell()
    /// Nib `SitterHistoriesCell`.
    static let sitterHistoriesCell = _R.nib._SitterHistoriesCell()
    /// Nib `SitterHistoryCell`.
    static let sitterHistoryCell = _R.nib._SitterHistoryCell()
    /// Nib `SitterHouseTagCell`.
    static let sitterHouseTagCell = _R.nib._SitterHouseTagCell()
    /// Nib `SitterHouseThumbnailCell`.
    static let sitterHouseThumbnailCell = _R.nib._SitterHouseThumbnailCell()
    /// Nib `SitterProfileCell`.
    static let sitterProfileCell = _R.nib._SitterProfileCell()
    /// Nib `SystemMessageCell`.
    static let systemMessageCell = _R.nib._SystemMessageCell()
    /// Nib `TagView`.
    static let tagView = _R.nib._TagView()
    /// Nib `TaskCell`.
    static let taskCell = _R.nib._TaskCell()
    /// Nib `TextCell`.
    static let textCell = _R.nib._TextCell()
    /// Nib `TextFieldCell`.
    static let textFieldCell = _R.nib._TextFieldCell()
    /// Nib `TextFieldWithSectionCell`.
    static let textFieldWithSectionCell = _R.nib._TextFieldWithSectionCell()
    /// Nib `TextFieldWithoutLabelCell`.
    static let textFieldWithoutLabelCell = _R.nib._TextFieldWithoutLabelCell()
    /// Nib `TextViewCell`.
    static let textViewCell = _R.nib._TextViewCell()
    /// Nib `TextViewWithoutLabelCell`.
    static let textViewWithoutLabelCell = _R.nib._TextViewWithoutLabelCell()
    /// Nib `UploadPhotoCell`.
    static let uploadPhotoCell = _R.nib._UploadPhotoCell()
    /// Nib `VerticalItemCell`.
    static let verticalItemCell = _R.nib._VerticalItemCell()
    /// Nib `YourMessageCell`.
    static let yourMessageCell = _R.nib._YourMessageCell()
    /// Nib `YourMessageImageCell`.
    static let yourMessageImageCell = _R.nib._YourMessageImageCell()
    
    /// `UINib(name: "BankAccountCell", in: bundle)`
    static func bankAccountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankAccountCell)
    }
    
    /// `UINib(name: "BookingCell", in: bundle)`
    static func bookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingCell)
    }
    
    /// `UINib(name: "CalendarTextFieldCell", in: bundle)`
    static func calendarTextFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarTextFieldCell)
    }
    
    /// `UINib(name: "CalendarView", in: bundle)`
    static func calendarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarView)
    }
    
    /// `UINib(name: "ClosedKeepBookingCell", in: bundle)`
    static func closedKeepBookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.closedKeepBookingCell)
    }
    
    /// `UINib(name: "ClosedLeaveBookingCell", in: bundle)`
    static func closedLeaveBookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.closedLeaveBookingCell)
    }
    
    /// `UINib(name: "DatePickerTextFieldCell", in: bundle)`
    static func datePickerTextFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePickerTextFieldCell)
    }
    
    /// `UINib(name: "DogProfileCell", in: bundle)`
    static func dogProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dogProfileCell)
    }
    
    /// `UINib(name: "EditProfileHeaderView", in: bundle)`
    static func editProfileHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileHeaderView)
    }
    
    /// `UINib(name: "EmptyView", in: bundle)`
    static func emptyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyView)
    }
    
    /// `UINib(name: "FooterBtnView", in: bundle)`
    static func footerBtnView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerBtnView)
    }
    
    /// `UINib(name: "FooterBtnWithLinkView", in: bundle)`
    static func footerBtnWithLinkView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerBtnWithLinkView)
    }
    
    /// `UINib(name: "FooterLinkView", in: bundle)`
    static func footerLinkView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerLinkView)
    }
    
    /// `UINib(name: "FooterLoadingView", in: bundle)`
    static func footerLoadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerLoadingView)
    }
    
    /// `UINib(name: "HorizontalItemCell", in: bundle)`
    static func horizontalItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.horizontalItemCell)
    }
    
    /// `UINib(name: "HorizontalItemInputCell", in: bundle)`
    static func horizontalItemInputCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.horizontalItemInputCell)
    }
    
    /// `UINib(name: "HorizontalItemSwitchCell", in: bundle)`
    static func horizontalItemSwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.horizontalItemSwitchCell)
    }
    
    /// `UINib(name: "InputReviewCell", in: bundle)`
    static func inputReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputReviewCell)
    }
    
    /// `UINib(name: "KeepBookingDetailView", in: bundle)`
    static func keepBookingDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.keepBookingDetailView)
    }
    
    /// `UINib(name: "LeaveBookingDetailView", in: bundle)`
    static func leaveBookingDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leaveBookingDetailView)
    }
    
    /// `UINib(name: "MapCell", in: bundle)`
    static func mapCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapCell)
    }
    
    /// `UINib(name: "MessageInputView", in: bundle)`
    static func messageInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageInputView)
    }
    
    /// `UINib(name: "MessageLinkView", in: bundle)`
    static func messageLinkView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageLinkView)
    }
    
    /// `UINib(name: "MyMessageCell", in: bundle)`
    static func myMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myMessageCell)
    }
    
    /// `UINib(name: "MyMessageImageCell", in: bundle)`
    static func myMessageImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myMessageImageCell)
    }
    
    /// `UINib(name: "NoticeCell", in: bundle)`
    static func noticeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noticeCell)
    }
    
    /// `UINib(name: "NoticeDetailCell", in: bundle)`
    static func noticeDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noticeDetailCell)
    }
    
    /// `UINib(name: "PickerTextFieldCell", in: bundle)`
    static func pickerTextFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerTextFieldCell)
    }
    
    /// `UINib(name: "PickerTextFieldWithSectionCell", in: bundle)`
    static func pickerTextFieldWithSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerTextFieldWithSectionCell)
    }
    
    /// `UINib(name: "PostalCodeHeaderView", in: bundle)`
    static func postalCodeHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postalCodeHeaderView)
    }
    
    /// `UINib(name: "ProfileCell", in: bundle)`
    static func profileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCell)
    }
    
    /// `UINib(name: "ProfileHeaderView", in: bundle)`
    static func profileHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileHeaderView)
    }
    
    /// `UINib(name: "ReviewCell", in: bundle)`
    static func reviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewCell)
    }
    
    /// `UINib(name: "ReviewHeaderView", in: bundle)`
    static func reviewHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewHeaderView)
    }
    
    /// `UINib(name: "ReviewScoreView", in: bundle)`
    static func reviewScoreView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewScoreView)
    }
    
    /// `UINib(name: "SearchHeaderView", in: bundle)`
    static func searchHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHeaderView)
    }
    
    /// `UINib(name: "SearchSitterCell", in: bundle)`
    static func searchSitterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchSitterCell)
    }
    
    /// `UINib(name: "SignUpPromotionCell", in: bundle)`
    static func signUpPromotionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signUpPromotionCell)
    }
    
    /// `UINib(name: "SitterHistoriesCell", in: bundle)`
    static func sitterHistoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sitterHistoriesCell)
    }
    
    /// `UINib(name: "SitterHistoryCell", in: bundle)`
    static func sitterHistoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sitterHistoryCell)
    }
    
    /// `UINib(name: "SitterHouseTagCell", in: bundle)`
    static func sitterHouseTagCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sitterHouseTagCell)
    }
    
    /// `UINib(name: "SitterHouseThumbnailCell", in: bundle)`
    static func sitterHouseThumbnailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sitterHouseThumbnailCell)
    }
    
    /// `UINib(name: "SitterProfileCell", in: bundle)`
    static func sitterProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sitterProfileCell)
    }
    
    /// `UINib(name: "SystemMessageCell", in: bundle)`
    static func systemMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.systemMessageCell)
    }
    
    /// `UINib(name: "TagView", in: bundle)`
    static func tagView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagView)
    }
    
    /// `UINib(name: "TaskCell", in: bundle)`
    static func taskCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskCell)
    }
    
    /// `UINib(name: "TextCell", in: bundle)`
    static func textCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textCell)
    }
    
    /// `UINib(name: "TextFieldCell", in: bundle)`
    static func textFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldCell)
    }
    
    /// `UINib(name: "TextFieldWithSectionCell", in: bundle)`
    static func textFieldWithSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldWithSectionCell)
    }
    
    /// `UINib(name: "TextFieldWithoutLabelCell", in: bundle)`
    static func textFieldWithoutLabelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldWithoutLabelCell)
    }
    
    /// `UINib(name: "TextViewCell", in: bundle)`
    static func textViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textViewCell)
    }
    
    /// `UINib(name: "TextViewWithoutLabelCell", in: bundle)`
    static func textViewWithoutLabelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textViewWithoutLabelCell)
    }
    
    /// `UINib(name: "UploadPhotoCell", in: bundle)`
    static func uploadPhotoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uploadPhotoCell)
    }
    
    /// `UINib(name: "VerticalItemCell", in: bundle)`
    static func verticalItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verticalItemCell)
    }
    
    /// `UINib(name: "YourMessageCell", in: bundle)`
    static func yourMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yourMessageCell)
    }
    
    /// `UINib(name: "YourMessageImageCell", in: bundle)`
    static func yourMessageImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yourMessageImageCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 39 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BankAccountCell`.
    static let bankAccountCell: Rswift.ReuseIdentifier<BankAccountCell> = Rswift.ReuseIdentifier(identifier: "BankAccountCell")
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `CalendarTextFieldCell`.
    static let calendarTextFieldCell: Rswift.ReuseIdentifier<CalendarTextFieldCell> = Rswift.ReuseIdentifier(identifier: "CalendarTextFieldCell")
    /// Reuse identifier `ClosedKeepBookingCell`.
    static let closedKeepBookingCell: Rswift.ReuseIdentifier<ClosedKeepBookingCell> = Rswift.ReuseIdentifier(identifier: "ClosedKeepBookingCell")
    /// Reuse identifier `ClosedLeaveBookingCell`.
    static let closedLeaveBookingCell: Rswift.ReuseIdentifier<ClosedLeaveBookingCell> = Rswift.ReuseIdentifier(identifier: "ClosedLeaveBookingCell")
    /// Reuse identifier `DatePickerTextFieldCell`.
    static let datePickerTextFieldCell: Rswift.ReuseIdentifier<DatePickerTextFieldCell> = Rswift.ReuseIdentifier(identifier: "DatePickerTextFieldCell")
    /// Reuse identifier `DogProfileCell`.
    static let dogProfileCell: Rswift.ReuseIdentifier<DogProfileCell> = Rswift.ReuseIdentifier(identifier: "DogProfileCell")
    /// Reuse identifier `HorizontalItemCell`.
    static let horizontalItemCell: Rswift.ReuseIdentifier<HorizontalItemCell> = Rswift.ReuseIdentifier(identifier: "HorizontalItemCell")
    /// Reuse identifier `HorizontalItemInputCell`.
    static let horizontalItemInputCell: Rswift.ReuseIdentifier<HorizontalItemInputCell> = Rswift.ReuseIdentifier(identifier: "HorizontalItemInputCell")
    /// Reuse identifier `HorizontalItemSwitchCell`.
    static let horizontalItemSwitchCell: Rswift.ReuseIdentifier<HorizontalItemSwitchCell> = Rswift.ReuseIdentifier(identifier: "HorizontalItemSwitchCell")
    /// Reuse identifier `InputReviewCell`.
    static let inputReviewCell: Rswift.ReuseIdentifier<InputReviewCell> = Rswift.ReuseIdentifier(identifier: "InputReviewCell")
    /// Reuse identifier `MapCell`.
    static let mapCell: Rswift.ReuseIdentifier<MapCell> = Rswift.ReuseIdentifier(identifier: "MapCell")
    /// Reuse identifier `MyMessageCell`.
    static let myMessageCell: Rswift.ReuseIdentifier<MyMessageCell> = Rswift.ReuseIdentifier(identifier: "MyMessageCell")
    /// Reuse identifier `MyMessageImageCell`.
    static let myMessageImageCell: Rswift.ReuseIdentifier<MyMessageImageCell> = Rswift.ReuseIdentifier(identifier: "MyMessageImageCell")
    /// Reuse identifier `NoticeCell`.
    static let noticeCell: Rswift.ReuseIdentifier<NoticeCell> = Rswift.ReuseIdentifier(identifier: "NoticeCell")
    /// Reuse identifier `NoticeDetailCell`.
    static let noticeDetailCell: Rswift.ReuseIdentifier<NoticeDetailCell> = Rswift.ReuseIdentifier(identifier: "NoticeDetailCell")
    /// Reuse identifier `PickerTextFieldCell`.
    static let pickerTextFieldCell: Rswift.ReuseIdentifier<PickerTextFieldCell> = Rswift.ReuseIdentifier(identifier: "PickerTextFieldCell")
    /// Reuse identifier `PickerTextFieldWithSectionCell`.
    static let pickerTextFieldWithSectionCell: Rswift.ReuseIdentifier<PickerTextFieldWithSectionCell> = Rswift.ReuseIdentifier(identifier: "PickerTextFieldWithSectionCell")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `ReviewCell`.
    static let reviewCell: Rswift.ReuseIdentifier<ReviewCell> = Rswift.ReuseIdentifier(identifier: "ReviewCell")
    /// Reuse identifier `SearchSitterCell`.
    static let searchSitterCell: Rswift.ReuseIdentifier<SearchSitterCell> = Rswift.ReuseIdentifier(identifier: "SearchSitterCell")
    /// Reuse identifier `SignUpPromotionCell`.
    static let signUpPromotionCell: Rswift.ReuseIdentifier<SignUpPromotionCell> = Rswift.ReuseIdentifier(identifier: "SignUpPromotionCell")
    /// Reuse identifier `SitterHistoriesCell`.
    static let sitterHistoriesCell: Rswift.ReuseIdentifier<SitterHistoriesCell> = Rswift.ReuseIdentifier(identifier: "SitterHistoriesCell")
    /// Reuse identifier `SitterHistoryCell`.
    static let sitterHistoryCell: Rswift.ReuseIdentifier<SitterHistoryCell> = Rswift.ReuseIdentifier(identifier: "SitterHistoryCell")
    /// Reuse identifier `SitterHouseTagCell`.
    static let sitterHouseTagCell: Rswift.ReuseIdentifier<SitterHouseTagCell> = Rswift.ReuseIdentifier(identifier: "SitterHouseTagCell")
    /// Reuse identifier `SitterHouseThumbnailCell`.
    static let sitterHouseThumbnailCell: Rswift.ReuseIdentifier<SitterHouseThumbnailCell> = Rswift.ReuseIdentifier(identifier: "SitterHouseThumbnailCell")
    /// Reuse identifier `SitterProfileCell`.
    static let sitterProfileCell: Rswift.ReuseIdentifier<SitterProfileCell> = Rswift.ReuseIdentifier(identifier: "SitterProfileCell")
    /// Reuse identifier `SystemMessageCell`.
    static let systemMessageCell: Rswift.ReuseIdentifier<SystemMessageCell> = Rswift.ReuseIdentifier(identifier: "SystemMessageCell")
    /// Reuse identifier `TaskCell`.
    static let taskCell: Rswift.ReuseIdentifier<TaskCell> = Rswift.ReuseIdentifier(identifier: "TaskCell")
    /// Reuse identifier `TextCell`.
    static let textCell: Rswift.ReuseIdentifier<TextCell> = Rswift.ReuseIdentifier(identifier: "TextCell")
    /// Reuse identifier `TextFieldCell`.
    static let textFieldCell: Rswift.ReuseIdentifier<TextFieldCell> = Rswift.ReuseIdentifier(identifier: "TextFieldCell")
    /// Reuse identifier `TextFieldWithSectionCell`.
    static let textFieldWithSectionCell: Rswift.ReuseIdentifier<TextFieldWithSectionCell> = Rswift.ReuseIdentifier(identifier: "TextFieldWithSectionCell")
    /// Reuse identifier `TextFieldWithoutLabelCell`.
    static let textFieldWithoutLabelCell: Rswift.ReuseIdentifier<TextFieldWithoutLabelCell> = Rswift.ReuseIdentifier(identifier: "TextFieldWithoutLabelCell")
    /// Reuse identifier `TextViewCell`.
    static let textViewCell: Rswift.ReuseIdentifier<TextViewCell> = Rswift.ReuseIdentifier(identifier: "TextViewCell")
    /// Reuse identifier `TextViewWithoutLabelCell`.
    static let textViewWithoutLabelCell: Rswift.ReuseIdentifier<TextViewWithoutLabelCell> = Rswift.ReuseIdentifier(identifier: "TextViewWithoutLabelCell")
    /// Reuse identifier `UploadPhotoCell`.
    static let uploadPhotoCell: Rswift.ReuseIdentifier<UploadPhotoCell> = Rswift.ReuseIdentifier(identifier: "UploadPhotoCell")
    /// Reuse identifier `VerticalItemCell`.
    static let verticalItemCell: Rswift.ReuseIdentifier<VerticalItemCell> = Rswift.ReuseIdentifier(identifier: "VerticalItemCell")
    /// Reuse identifier `YourMessageCell`.
    static let yourMessageCell: Rswift.ReuseIdentifier<YourMessageCell> = Rswift.ReuseIdentifier(identifier: "YourMessageCell")
    /// Reuse identifier `YourMessageImageCell`.
    static let yourMessageImageCell: Rswift.ReuseIdentifier<YourMessageImageCell> = Rswift.ReuseIdentifier(identifier: "YourMessageImageCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 16 view controllers.
  struct segue {
    /// This struct is generated for `DogProfileViewController`, and contains static references to 1 segues.
    struct dogProfileViewController {
      /// Segue identifier `fromDogProfileToEdit`.
      static let fromDogProfileToEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DogProfileViewController, EditDogProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromDogProfileToEdit")
      
      /// Optionally returns a typed version of segue `fromDogProfileToEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromDogProfileToEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DogProfileViewController, EditDogProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dogProfileViewController.fromDogProfileToEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LaunchViewController`, and contains static references to 1 segues.
    struct launchViewController {
      /// Segue identifier `fromLaunchToRoot`.
      static let fromLaunchToRoot: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LaunchViewController, RootViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromLaunchToRoot")
      
      /// Optionally returns a typed version of segue `fromLaunchToRoot`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromLaunchToRoot(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LaunchViewController, RootViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.launchViewController.fromLaunchToRoot, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MessageViewController`, and contains static references to 1 segues.
    struct messageViewController {
      /// Segue identifier `fromMessageToEditRequest`.
      static let fromMessageToEditRequest: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MessageViewController, EditBookingRequestViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromMessageToEditRequest")
      
      /// Optionally returns a typed version of segue `fromMessageToEditRequest`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromMessageToEditRequest(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MessageViewController, EditBookingRequestViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.messageViewController.fromMessageToEditRequest, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MySitterProfileViewController`, and contains static references to 1 segues.
    struct mySitterProfileViewController {
      /// Segue identifier `fromSitterProfileToEdit`.
      static let fromSitterProfileToEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MySitterProfileViewController, EditSitterProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSitterProfileToEdit")
      
      /// Optionally returns a typed version of segue `fromSitterProfileToEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSitterProfileToEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MySitterProfileViewController, EditSitterProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mySitterProfileViewController.fromSitterProfileToEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NoticeListViewController`, and contains static references to 1 segues.
    struct noticeListViewController {
      /// Segue identifier `fromNoticeListToDetail`.
      static let fromNoticeListToDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NoticeListViewController, NoticeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromNoticeListToDetail")
      
      /// Optionally returns a typed version of segue `fromNoticeListToDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromNoticeListToDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NoticeListViewController, NoticeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.noticeListViewController.fromNoticeListToDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OtherViewController`, and contains static references to 6 segues.
    struct otherViewController {
      /// Segue identifier `fromOtherToClosedKeepBookingList`.
      static let fromOtherToClosedKeepBookingList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OtherViewController, ClosedKeepBookingListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromOtherToClosedKeepBookingList")
      /// Segue identifier `fromOtherToClosedLeaveBookingList`.
      static let fromOtherToClosedLeaveBookingList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OtherViewController, ClosedLeaveBookingListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromOtherToClosedLeaveBookingList")
      /// Segue identifier `fromOtherToNoticeList`.
      static let fromOtherToNoticeList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OtherViewController, NoticeListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromOtherToNoticeList")
      /// Segue identifier `fromOtherToReturnPoint`.
      static let fromOtherToReturnPoint: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OtherViewController, ReturnPointViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromOtherToReturnPoint")
      /// Segue identifier `fromOtherToSettingBankAccount`.
      static let fromOtherToSettingBankAccount: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OtherViewController, SettingBankAccountViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromOtherToSettingBankAccount")
      /// Segue identifier `fromOtherToSetting`.
      static let fromOtherToSetting: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OtherViewController, SettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromOtherToSetting")
      
      /// Optionally returns a typed version of segue `fromOtherToClosedKeepBookingList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromOtherToClosedKeepBookingList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OtherViewController, ClosedKeepBookingListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.otherViewController.fromOtherToClosedKeepBookingList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromOtherToClosedLeaveBookingList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromOtherToClosedLeaveBookingList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OtherViewController, ClosedLeaveBookingListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.otherViewController.fromOtherToClosedLeaveBookingList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromOtherToNoticeList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromOtherToNoticeList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OtherViewController, NoticeListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.otherViewController.fromOtherToNoticeList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromOtherToReturnPoint`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromOtherToReturnPoint(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OtherViewController, ReturnPointViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.otherViewController.fromOtherToReturnPoint, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromOtherToSettingBankAccount`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromOtherToSettingBankAccount(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OtherViewController, SettingBankAccountViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.otherViewController.fromOtherToSettingBankAccount, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromOtherToSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromOtherToSetting(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OtherViewController, SettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.otherViewController.fromOtherToSetting, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ReturnPointViewController`, and contains static references to 1 segues.
    struct returnPointViewController {
      /// Segue identifier `fromReturnPointToSelectBankAccount`.
      static let fromReturnPointToSelectBankAccount: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReturnPointViewController, SelectBankAccountViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromReturnPointToSelectBankAccount")
      
      /// Optionally returns a typed version of segue `fromReturnPointToSelectBankAccount`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromReturnPointToSelectBankAccount(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReturnPointViewController, SelectBankAccountViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.returnPointViewController.fromReturnPointToSelectBankAccount, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchResultViewController`, and contains static references to 2 segues.
    struct searchResultViewController {
      /// Segue identifier `fromSearchResultToInputPostalCode`.
      static let fromSearchResultToInputPostalCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchResultViewController, InputPostalCodeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSearchResultToInputPostalCode")
      /// Segue identifier `fromSearchResultToSitterDetail`.
      static let fromSearchResultToSitterDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchResultViewController, SitterDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSearchResultToSitterDetail")
      
      /// Optionally returns a typed version of segue `fromSearchResultToInputPostalCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSearchResultToInputPostalCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchResultViewController, InputPostalCodeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchResultViewController.fromSearchResultToInputPostalCode, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSearchResultToSitterDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSearchResultToSitterDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchResultViewController, SitterDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchResultViewController.fromSearchResultToSitterDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchViewController`, and contains static references to 2 segues.
    struct searchViewController {
      /// Segue identifier `fromSearchToResult`.
      static let fromSearchToResult: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchViewController, SearchResultViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSearchToResult")
      /// Segue identifier `fromSearchToSitterDetail`.
      static let fromSearchToSitterDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchViewController, SitterDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSearchToSitterDetail")
      
      /// Optionally returns a typed version of segue `fromSearchToResult`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSearchToResult(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchViewController, SearchResultViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchViewController.fromSearchToResult, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSearchToSitterDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSearchToSitterDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchViewController, SitterDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchViewController.fromSearchToSitterDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SelectBankViewController`, and contains static references to 1 segues.
    struct selectBankViewController {
      /// Segue identifier `fromSelectBankToRegisterBankAccount`.
      static let fromSelectBankToRegisterBankAccount: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SelectBankViewController, RegisterBankAccountViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSelectBankToRegisterBankAccount")
      
      /// Optionally returns a typed version of segue `fromSelectBankToRegisterBankAccount`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSelectBankToRegisterBankAccount(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SelectBankViewController, RegisterBankAccountViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.selectBankViewController.fromSelectBankToRegisterBankAccount, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingBankAccountViewController`, and contains static references to 1 segues.
    struct settingBankAccountViewController {
      /// Segue identifier `fromSettingBankAccountToSelectBank`.
      static let fromSettingBankAccountToSelectBank: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingBankAccountViewController, SelectBankViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSettingBankAccountToSelectBank")
      
      /// Optionally returns a typed version of segue `fromSettingBankAccountToSelectBank`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSettingBankAccountToSelectBank(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingBankAccountViewController, SelectBankViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingBankAccountViewController.fromSettingBankAccountToSelectBank, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingViewController`, and contains static references to 4 segues.
    struct settingViewController {
      /// Segue identifier `fromSettingToEditEmail`.
      static let fromSettingToEditEmail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingViewController, EditEmailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSettingToEditEmail")
      /// Segue identifier `fromSettingToEditPassword`.
      static let fromSettingToEditPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingViewController, EditPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSettingToEditPassword")
      /// Segue identifier `fromSettingToLicenseList`.
      static let fromSettingToLicenseList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingViewController, LicenseListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSettingToLicenseList")
      /// Segue identifier `fromSettingToSettingPushNotification`.
      static let fromSettingToSettingPushNotification: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingViewController, SettingPushNotificationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSettingToSettingPushNotification")
      
      /// Optionally returns a typed version of segue `fromSettingToEditEmail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSettingToEditEmail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingViewController, EditEmailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingViewController.fromSettingToEditEmail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSettingToEditPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSettingToEditPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingViewController, EditPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingViewController.fromSettingToEditPassword, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSettingToLicenseList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSettingToLicenseList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingViewController, LicenseListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingViewController.fromSettingToLicenseList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSettingToSettingPushNotification`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSettingToSettingPushNotification(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingViewController, SettingPushNotificationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingViewController.fromSettingToSettingPushNotification, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignInViewController`, and contains static references to 1 segues.
    struct signInViewController {
      /// Segue identifier `fromSignInToResetPassword`.
      static let fromSignInToResetPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, ResetPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSignInToResetPassword")
      
      /// Optionally returns a typed version of segue `fromSignInToResetPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSignInToResetPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, ResetPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.fromSignInToResetPassword, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpViewController`, and contains static references to 1 segues.
    struct signUpViewController {
      /// Segue identifier `fromSignUpToCreateDog`.
      static let fromSignUpToCreateDog: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpViewController, CreateDogViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSignUpToCreateDog")
      
      /// Optionally returns a typed version of segue `fromSignUpToCreateDog`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSignUpToCreateDog(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpViewController, CreateDogViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpViewController.fromSignUpToCreateDog, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TaskListViewController`, and contains static references to 2 segues.
    struct taskListViewController {
      /// Segue identifier `fromTaskListToReportTask`.
      static let fromTaskListToReportTask: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TaskListViewController, ReportTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromTaskListToReportTask")
      /// Segue identifier `fromTaskListToReviewTask`.
      static let fromTaskListToReviewTask: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TaskListViewController, ReviewTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromTaskListToReviewTask")
      
      /// Optionally returns a typed version of segue `fromTaskListToReportTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromTaskListToReportTask(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TaskListViewController, ReportTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.taskListViewController.fromTaskListToReportTask, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromTaskListToReviewTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromTaskListToReviewTask(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TaskListViewController, ReviewTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.taskListViewController.fromTaskListToReviewTask, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserProfileViewController`, and contains static references to 1 segues.
    struct userProfileViewController {
      /// Segue identifier `fromUserProfileToEdit`.
      static let fromUserProfileToEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserProfileViewController, EditUserProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromUserProfileToEdit")
      
      /// Optionally returns a typed version of segue `fromUserProfileToEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromUserProfileToEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserProfileViewController, EditUserProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userProfileViewController.fromUserProfileToEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 16 storyboards.
  struct storyboard {
    /// Storyboard `CreateDogModal`.
    static let createDogModal = _R.storyboard.createDogModal()
    /// Storyboard `KeepBooking`.
    static let keepBooking = _R.storyboard.keepBooking()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LeaveBooking`.
    static let leaveBooking = _R.storyboard.leaveBooking()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Message`.
    static let message = _R.storyboard.message()
    /// Storyboard `PhotoPager`.
    static let photoPager = _R.storyboard.photoPager()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Promotion`.
    static let promotion = _R.storyboard.promotion()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `SignIn`.
    static let signIn = _R.storyboard.signIn()
    /// Storyboard `SignUp`.
    static let signUp = _R.storyboard.signUp()
    /// Storyboard `Task`.
    static let task = _R.storyboard.task()
    /// Storyboard `WebView`.
    static let webView = _R.storyboard.webView()
    /// Storyboard `Welcome`.
    static let welcome = _R.storyboard.welcome()
    
    /// `UIStoryboard(name: "CreateDogModal", bundle: ...)`
    static func createDogModal(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createDogModal)
    }
    
    /// `UIStoryboard(name: "KeepBooking", bundle: ...)`
    static func keepBooking(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.keepBooking)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LeaveBooking", bundle: ...)`
    static func leaveBooking(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.leaveBooking)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Message", bundle: ...)`
    static func message(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.message)
    }
    
    /// `UIStoryboard(name: "PhotoPager", bundle: ...)`
    static func photoPager(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.photoPager)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Promotion", bundle: ...)`
    static func promotion(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.promotion)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    /// `UIStoryboard(name: "SignIn", bundle: ...)`
    static func signIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signIn)
    }
    
    /// `UIStoryboard(name: "SignUp", bundle: ...)`
    static func signUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUp)
    }
    
    /// `UIStoryboard(name: "Task", bundle: ...)`
    static func task(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.task)
    }
    
    /// `UIStoryboard(name: "WebView", bundle: ...)`
    static func webView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.webView)
    }
    
    /// `UIStoryboard(name: "Welcome", bundle: ...)`
    static func welcome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcome)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ReviewHeaderView.validate()
      try _TaskCell.validate()
      try _ReviewCell.validate()
      try _DogProfileCell.validate()
      try _ReviewScoreView.validate()
      try _MessageInputView.validate()
      try _EditProfileHeaderView.validate()
      try _ProfileHeaderView.validate()
      try _BookingCell.validate()
      try _TagView.validate()
      try _YourMessageImageCell.validate()
      try _UploadPhotoCell.validate()
      try _SignUpPromotionCell.validate()
      try _SitterHistoryCell.validate()
      try _YourMessageCell.validate()
      try _SitterProfileCell.validate()
      try _SearchSitterCell.validate()
    }
    
    struct _BankAccountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BankAccountCell
      
      let bundle = R.hostingBundle
      let identifier = "BankAccountCell"
      let name = "BankAccountCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BankAccountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankAccountCell
      }
      
      fileprivate init() {}
    }
    
    struct _BookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookingCell
      
      let bundle = R.hostingBundle
      let identifier = "BookingCell"
      let name = "BookingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'BookingCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CalendarTextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CalendarTextFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "CalendarTextFieldCell"
      let name = "CalendarTextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CalendarTextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalendarTextFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _CalendarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CalendarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CalendarView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalendarView
      }
      
      fileprivate init() {}
    }
    
    struct _ClosedKeepBookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClosedKeepBookingCell
      
      let bundle = R.hostingBundle
      let identifier = "ClosedKeepBookingCell"
      let name = "ClosedKeepBookingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClosedKeepBookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClosedKeepBookingCell
      }
      
      fileprivate init() {}
    }
    
    struct _ClosedLeaveBookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClosedLeaveBookingCell
      
      let bundle = R.hostingBundle
      let identifier = "ClosedLeaveBookingCell"
      let name = "ClosedLeaveBookingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClosedLeaveBookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClosedLeaveBookingCell
      }
      
      fileprivate init() {}
    }
    
    struct _DatePickerTextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DatePickerTextFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "DatePickerTextFieldCell"
      let name = "DatePickerTextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DatePickerTextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DatePickerTextFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _DogProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DogProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "DogProfileCell"
      let name = "DogProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DogProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DogProfileCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icDefaultDog", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icDefaultDog' is used in nib 'DogProfileCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditProfileHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditProfileHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'EditProfileHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmptyView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyView
      }
      
      fileprivate init() {}
    }
    
    struct _FooterBtnView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterBtnView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FooterBtnView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterBtnView
      }
      
      fileprivate init() {}
    }
    
    struct _FooterBtnWithLinkView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterBtnWithLinkView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FooterBtnWithLinkView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterBtnWithLinkView
      }
      
      fileprivate init() {}
    }
    
    struct _FooterLinkView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterLinkView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FooterLinkView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterLinkView
      }
      
      fileprivate init() {}
    }
    
    struct _FooterLoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterLoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FooterLoadingView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterLoadingView
      }
      
      fileprivate init() {}
    }
    
    struct _HorizontalItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HorizontalItemCell
      
      let bundle = R.hostingBundle
      let identifier = "HorizontalItemCell"
      let name = "HorizontalItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HorizontalItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _HorizontalItemInputCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HorizontalItemInputCell
      
      let bundle = R.hostingBundle
      let identifier = "HorizontalItemInputCell"
      let name = "HorizontalItemInputCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HorizontalItemInputCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalItemInputCell
      }
      
      fileprivate init() {}
    }
    
    struct _HorizontalItemSwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HorizontalItemSwitchCell
      
      let bundle = R.hostingBundle
      let identifier = "HorizontalItemSwitchCell"
      let name = "HorizontalItemSwitchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HorizontalItemSwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalItemSwitchCell
      }
      
      fileprivate init() {}
    }
    
    struct _InputReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InputReviewCell
      
      let bundle = R.hostingBundle
      let identifier = "InputReviewCell"
      let name = "InputReviewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InputReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputReviewCell
      }
      
      fileprivate init() {}
    }
    
    struct _KeepBookingDetailView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KeepBookingDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> KeepBookingDetailView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KeepBookingDetailView
      }
      
      fileprivate init() {}
    }
    
    struct _LeaveBookingDetailView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LeaveBookingDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LeaveBookingDetailView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeaveBookingDetailView
      }
      
      fileprivate init() {}
    }
    
    struct _MapCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MapCell
      
      let bundle = R.hostingBundle
      let identifier = "MapCell"
      let name = "MapCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MapCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapCell
      }
      
      fileprivate init() {}
    }
    
    struct _MessageInputView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MessageInputView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessageInputView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageInputView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera' is used in nib 'MessageInputView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageLinkView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageLinkView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessageLinkView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageLinkView
      }
      
      fileprivate init() {}
    }
    
    struct _MyMessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyMessageCell
      
      let bundle = R.hostingBundle
      let identifier = "MyMessageCell"
      let name = "MyMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyMessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyMessageCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyMessageImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyMessageImageCell
      
      let bundle = R.hostingBundle
      let identifier = "MyMessageImageCell"
      let name = "MyMessageImageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyMessageImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyMessageImageCell
      }
      
      fileprivate init() {}
    }
    
    struct _NoticeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NoticeCell
      
      let bundle = R.hostingBundle
      let identifier = "NoticeCell"
      let name = "NoticeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NoticeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoticeCell
      }
      
      fileprivate init() {}
    }
    
    struct _NoticeDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NoticeDetailCell
      
      let bundle = R.hostingBundle
      let identifier = "NoticeDetailCell"
      let name = "NoticeDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NoticeDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoticeDetailCell
      }
      
      fileprivate init() {}
    }
    
    struct _PickerTextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PickerTextFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "PickerTextFieldCell"
      let name = "PickerTextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PickerTextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickerTextFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _PickerTextFieldWithSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PickerTextFieldWithSectionCell
      
      let bundle = R.hostingBundle
      let identifier = "PickerTextFieldWithSectionCell"
      let name = "PickerTextFieldWithSectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PickerTextFieldWithSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickerTextFieldWithSectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _PostalCodeHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PostalCodeHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PostalCodeHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostalCodeHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileCell"
      let name = "ProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReviewCell
      
      let bundle = R.hostingBundle
      let identifier = "ReviewCell"
      let name = "ReviewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'ReviewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReviewHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ReviewHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'ReviewHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewScoreView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReviewScoreView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ReviewScoreView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewScoreView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_review_star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_review_star' is used in nib 'ReviewScoreView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchSitterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchSitterCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchSitterCell"
      let name = "SearchSitterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchSitterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchSitterCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'SearchSitterCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SignUpPromotionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SignUpPromotionCell
      
      let bundle = R.hostingBundle
      let identifier = "SignUpPromotionCell"
      let name = "SignUpPromotionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SignUpPromotionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignUpPromotionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "signupBanner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signupBanner' is used in nib 'SignUpPromotionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SitterHistoriesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SitterHistoriesCell
      
      let bundle = R.hostingBundle
      let identifier = "SitterHistoriesCell"
      let name = "SitterHistoriesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SitterHistoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SitterHistoriesCell
      }
      
      fileprivate init() {}
    }
    
    struct _SitterHistoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SitterHistoryCell
      
      let bundle = R.hostingBundle
      let identifier = "SitterHistoryCell"
      let name = "SitterHistoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SitterHistoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SitterHistoryCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sample_leave_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sample_leave_header' is used in nib 'SitterHistoryCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'SitterHistoryCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SitterHouseTagCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SitterHouseTagCell
      
      let bundle = R.hostingBundle
      let identifier = "SitterHouseTagCell"
      let name = "SitterHouseTagCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SitterHouseTagCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SitterHouseTagCell
      }
      
      fileprivate init() {}
    }
    
    struct _SitterHouseThumbnailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SitterHouseThumbnailCell
      
      let bundle = R.hostingBundle
      let identifier = "SitterHouseThumbnailCell"
      let name = "SitterHouseThumbnailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SitterHouseThumbnailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SitterHouseThumbnailCell
      }
      
      fileprivate init() {}
    }
    
    struct _SitterProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SitterProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "SitterProfileCell"
      let name = "SitterProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SitterProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SitterProfileCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'SitterProfileCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SystemMessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SystemMessageCell
      
      let bundle = R.hostingBundle
      let identifier = "SystemMessageCell"
      let name = "SystemMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SystemMessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SystemMessageCell
      }
      
      fileprivate init() {}
    }
    
    struct _TagView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TagView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TagView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tag_sample", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tag_sample' is used in nib 'TagView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TaskCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TaskCell
      
      let bundle = R.hostingBundle
      let identifier = "TaskCell"
      let name = "TaskCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TaskCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera' is used in nib 'TaskCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextCell
      
      let bundle = R.hostingBundle
      let identifier = "TextCell"
      let name = "TextCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "TextFieldCell"
      let name = "TextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextFieldWithSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextFieldWithSectionCell
      
      let bundle = R.hostingBundle
      let identifier = "TextFieldWithSectionCell"
      let name = "TextFieldWithSectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextFieldWithSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextFieldWithSectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextFieldWithoutLabelCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextFieldWithoutLabelCell
      
      let bundle = R.hostingBundle
      let identifier = "TextFieldWithoutLabelCell"
      let name = "TextFieldWithoutLabelCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextFieldWithoutLabelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextFieldWithoutLabelCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TextViewCell"
      let name = "TextViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextViewWithoutLabelCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextViewWithoutLabelCell
      
      let bundle = R.hostingBundle
      let identifier = "TextViewWithoutLabelCell"
      let name = "TextViewWithoutLabelCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextViewWithoutLabelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewWithoutLabelCell
      }
      
      fileprivate init() {}
    }
    
    struct _UploadPhotoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UploadPhotoCell
      
      let bundle = R.hostingBundle
      let identifier = "UploadPhotoCell"
      let name = "UploadPhotoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UploadPhotoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UploadPhotoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "taskPhotoBlank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'taskPhotoBlank' is used in nib 'UploadPhotoCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VerticalItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = VerticalItemCell
      
      let bundle = R.hostingBundle
      let identifier = "VerticalItemCell"
      let name = "VerticalItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VerticalItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerticalItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _YourMessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = YourMessageCell
      
      let bundle = R.hostingBundle
      let identifier = "YourMessageCell"
      let name = "YourMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> YourMessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YourMessageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'YourMessageCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _YourMessageImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = YourMessageImageCell
      
      let bundle = R.hostingBundle
      let identifier = "YourMessageImageCell"
      let name = "YourMessageImageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> YourMessageImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YourMessageImageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_default_usericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in nib 'YourMessageImageCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try search.validate()
      try keepBooking.validate()
      try setting.validate()
      try task.validate()
      try createDogModal.validate()
      try signIn.validate()
      try launchScreen.validate()
      try welcome.validate()
      try signUp.validate()
      try promotion.validate()
      try photoPager.validate()
      try leaveBooking.validate()
      try message.validate()
      try profile.validate()
      try webView.validate()
    }
    
    struct createDogModal: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createDogModalViewController = StoryboardViewControllerResource<CreateDogModalViewController>(identifier: "CreateDogModalViewController")
      let name = "CreateDogModal"
      
      func createDogModalViewController(_: Void = ()) -> CreateDogModalViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createDogModalViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.createDogModal().createDogModalViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createDogModalViewController' could not be loaded from storyboard 'CreateDogModal' as 'CreateDogModalViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct keepBooking: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let keepBookingListViewController = StoryboardViewControllerResource<KeepBookingListViewController>(identifier: "KeepBookingListViewController")
      let keepBookingNavigationController = StoryboardViewControllerResource<KeepBookingNavigationController>(identifier: "KeepBookingNavigationController")
      let name = "KeepBooking"
      
      func keepBookingListViewController(_: Void = ()) -> KeepBookingListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: keepBookingListViewController)
      }
      
      func keepBookingNavigationController(_: Void = ()) -> KeepBookingNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: keepBookingNavigationController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tab_keep") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_keep' is used in storyboard 'KeepBooking', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_keep_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_keep_active' is used in storyboard 'KeepBooking', but couldn't be loaded.") }
        if _R.storyboard.keepBooking().keepBookingNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'keepBookingNavigationController' could not be loaded from storyboard 'KeepBooking' as 'KeepBookingNavigationController'.") }
        if _R.storyboard.keepBooking().keepBookingListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'keepBookingListViewController' could not be loaded from storyboard 'KeepBooking' as 'KeepBookingListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct leaveBooking: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let leaveBookingListViewController = StoryboardViewControllerResource<LeaveBookingListViewController>(identifier: "LeaveBookingListViewController")
      let leaveBookingNavigationController = StoryboardViewControllerResource<LeaveBookingNavigationController>(identifier: "LeaveBookingNavigationController")
      let name = "LeaveBooking"
      
      func leaveBookingListViewController(_: Void = ()) -> LeaveBookingListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leaveBookingListViewController)
      }
      
      func leaveBookingNavigationController(_: Void = ()) -> LeaveBookingNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leaveBookingNavigationController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tab_leave_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_leave_active' is used in storyboard 'LeaveBooking', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_leave") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_leave' is used in storyboard 'LeaveBooking', but couldn't be loaded.") }
        if _R.storyboard.leaveBooking().leaveBookingListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leaveBookingListViewController' could not be loaded from storyboard 'LeaveBooking' as 'LeaveBookingListViewController'.") }
        if _R.storyboard.leaveBooking().leaveBookingNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leaveBookingNavigationController' could not be loaded from storyboard 'LeaveBooking' as 'LeaveBookingNavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")
      
      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Main' as 'RootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct message: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bookingActionViewController = StoryboardViewControllerResource<BookingActionViewController>(identifier: "BookingActionViewController")
      let bundle = R.hostingBundle
      let editBookingRequestViewController = StoryboardViewControllerResource<EditBookingRequestViewController>(identifier: "EditBookingRequestViewController")
      let messageNavigationViewController = StoryboardViewControllerResource<MessageNavigationViewController>(identifier: "MessageNavigationViewController")
      let messageViewController = StoryboardViewControllerResource<MessageViewController>(identifier: "MessageViewController")
      let name = "Message"
      
      func bookingActionViewController(_: Void = ()) -> BookingActionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingActionViewController)
      }
      
      func editBookingRequestViewController(_: Void = ()) -> EditBookingRequestViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editBookingRequestViewController)
      }
      
      func messageNavigationViewController(_: Void = ()) -> MessageNavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messageNavigationViewController)
      }
      
      func messageViewController(_: Void = ()) -> MessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messageViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_navbar_others") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_navbar_others' is used in storyboard 'Message', but couldn't be loaded.") }
        if _R.storyboard.message().editBookingRequestViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editBookingRequestViewController' could not be loaded from storyboard 'Message' as 'EditBookingRequestViewController'.") }
        if _R.storyboard.message().messageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messageViewController' could not be loaded from storyboard 'Message' as 'MessageViewController'.") }
        if _R.storyboard.message().messageNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messageNavigationViewController' could not be loaded from storyboard 'Message' as 'MessageNavigationViewController'.") }
        if _R.storyboard.message().bookingActionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingActionViewController' could not be loaded from storyboard 'Message' as 'BookingActionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct photoPager: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PhotoPager"
      let photoPagerViewController = StoryboardViewControllerResource<PhotoPagerViewController>(identifier: "PhotoPagerViewController")
      let photoViewController = StoryboardViewControllerResource<PhotoViewController>(identifier: "PhotoViewController")
      
      func photoPagerViewController(_: Void = ()) -> PhotoPagerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoPagerViewController)
      }
      
      func photoViewController(_: Void = ()) -> PhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sample_leave_header") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sample_leave_header' is used in storyboard 'PhotoPager', but couldn't be loaded.") }
        if _R.storyboard.photoPager().photoPagerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoPagerViewController' could not be loaded from storyboard 'PhotoPager' as 'PhotoPagerViewController'.") }
        if _R.storyboard.photoPager().photoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoViewController' could not be loaded from storyboard 'PhotoPager' as 'PhotoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let dogProfileNavigationController = StoryboardViewControllerResource<DogProfileNavigationController>(identifier: "DogProfileNavigationController")
      let dogProfileViewController = StoryboardViewControllerResource<DogProfileViewController>(identifier: "DogProfileViewController")
      let editDogProfileViewController = StoryboardViewControllerResource<EditDogProfileViewController>(identifier: "EditDogProfileViewController")
      let editSitterProfileViewController = StoryboardViewControllerResource<EditSitterProfileViewController>(identifier: "EditSitterProfileViewController")
      let editUserProfileViewController = StoryboardViewControllerResource<EditUserProfileViewController>(identifier: "EditUserProfileViewController")
      let mySitterProfileNavigationController = StoryboardViewControllerResource<MySitterProfileNavigationController>(identifier: "MySitterProfileNavigationController")
      let mySitterProfileViewController = StoryboardViewControllerResource<MySitterProfileViewController>(identifier: "MySitterProfileViewController")
      let name = "Profile"
      let sitterProfileViewController = StoryboardViewControllerResource<SitterProfileViewController>(identifier: "SitterProfileViewController")
      let userProfileNavigationController = StoryboardViewControllerResource<UserProfileNavigationController>(identifier: "UserProfileNavigationController")
      let userProfileViewController = StoryboardViewControllerResource<UserProfileViewController>(identifier: "UserProfileViewController")
      
      func dogProfileNavigationController(_: Void = ()) -> DogProfileNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dogProfileNavigationController)
      }
      
      func dogProfileViewController(_: Void = ()) -> DogProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dogProfileViewController)
      }
      
      func editDogProfileViewController(_: Void = ()) -> EditDogProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editDogProfileViewController)
      }
      
      func editSitterProfileViewController(_: Void = ()) -> EditSitterProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editSitterProfileViewController)
      }
      
      func editUserProfileViewController(_: Void = ()) -> EditUserProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editUserProfileViewController)
      }
      
      func mySitterProfileNavigationController(_: Void = ()) -> MySitterProfileNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mySitterProfileNavigationController)
      }
      
      func mySitterProfileViewController(_: Void = ()) -> MySitterProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mySitterProfileViewController)
      }
      
      func sitterProfileViewController(_: Void = ()) -> SitterProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sitterProfileViewController)
      }
      
      func userProfileNavigationController(_: Void = ()) -> UserProfileNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileNavigationController)
      }
      
      func userProfileViewController(_: Void = ()) -> UserProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tab_others_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_others_active' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_others") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_others' is used in storyboard 'Profile', but couldn't be loaded.") }
        if _R.storyboard.profile().dogProfileNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dogProfileNavigationController' could not be loaded from storyboard 'Profile' as 'DogProfileNavigationController'.") }
        if _R.storyboard.profile().dogProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dogProfileViewController' could not be loaded from storyboard 'Profile' as 'DogProfileViewController'.") }
        if _R.storyboard.profile().editSitterProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editSitterProfileViewController' could not be loaded from storyboard 'Profile' as 'EditSitterProfileViewController'.") }
        if _R.storyboard.profile().mySitterProfileNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mySitterProfileNavigationController' could not be loaded from storyboard 'Profile' as 'MySitterProfileNavigationController'.") }
        if _R.storyboard.profile().mySitterProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mySitterProfileViewController' could not be loaded from storyboard 'Profile' as 'MySitterProfileViewController'.") }
        if _R.storyboard.profile().editUserProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editUserProfileViewController' could not be loaded from storyboard 'Profile' as 'EditUserProfileViewController'.") }
        if _R.storyboard.profile().editDogProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editDogProfileViewController' could not be loaded from storyboard 'Profile' as 'EditDogProfileViewController'.") }
        if _R.storyboard.profile().userProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileViewController' could not be loaded from storyboard 'Profile' as 'UserProfileViewController'.") }
        if _R.storyboard.profile().sitterProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sitterProfileViewController' could not be loaded from storyboard 'Profile' as 'SitterProfileViewController'.") }
        if _R.storyboard.profile().userProfileNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileNavigationController' could not be loaded from storyboard 'Profile' as 'UserProfileNavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct promotion: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Promotion"
      let registerDogPromotionViewController = StoryboardViewControllerResource<RegisterDogPromotionViewController>(identifier: "RegisterDogPromotionViewController")
      let reviewPromotionViewController = StoryboardViewControllerResource<ReviewPromotionViewController>(identifier: "ReviewPromotionViewController")
      let signUpPromotionViewController = StoryboardViewControllerResource<SignUpPromotionViewController>(identifier: "SignUpPromotionViewController")
      
      func registerDogPromotionViewController(_: Void = ()) -> RegisterDogPromotionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerDogPromotionViewController)
      }
      
      func reviewPromotionViewController(_: Void = ()) -> ReviewPromotionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reviewPromotionViewController)
      }
      
      func signUpPromotionViewController(_: Void = ()) -> SignUpPromotionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpPromotionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "buttonDialogClose") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonDialogClose' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sample_leave_header") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sample_leave_header' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_default_usericon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_usericon' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if UIKit.UIImage(named: "registerDogDialog") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'registerDogDialog' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome' is used in storyboard 'Promotion', but couldn't be loaded.") }
        if _R.storyboard.promotion().signUpPromotionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpPromotionViewController' could not be loaded from storyboard 'Promotion' as 'SignUpPromotionViewController'.") }
        if _R.storyboard.promotion().reviewPromotionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reviewPromotionViewController' could not be loaded from storyboard 'Promotion' as 'ReviewPromotionViewController'.") }
        if _R.storyboard.promotion().registerDogPromotionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerDogPromotionViewController' could not be loaded from storyboard 'Promotion' as 'RegisterDogPromotionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let searchNavigationController = StoryboardViewControllerResource<SearchNavigationController>(identifier: "SearchNavigationController")
      
      func searchNavigationController(_: Void = ()) -> SearchNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchNavigationController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tab_search_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_search_active' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_search' is used in storyboard 'Search', but couldn't be loaded.") }
        if _R.storyboard.search().searchNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchNavigationController' could not be loaded from storyboard 'Search' as 'SearchNavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let licenseListViewController = StoryboardViewControllerResource<LicenseListViewController>(identifier: "LicenseListViewController")
      let name = "Setting"
      let noticeDetailViewController = StoryboardViewControllerResource<NoticeDetailViewController>(identifier: "NoticeDetailViewController")
      let noticeListViewController = StoryboardViewControllerResource<NoticeListViewController>(identifier: "NoticeListViewController")
      let otherViewController = StoryboardViewControllerResource<OtherViewController>(identifier: "OtherViewController")
      let selectBankAccountViewController = StoryboardViewControllerResource<SelectBankAccountViewController>(identifier: "SelectBankAccountViewController")
      let setting = StoryboardViewControllerResource<SettingViewController>(identifier: "Setting")
      let settingBankAccountViewController = StoryboardViewControllerResource<SettingBankAccountViewController>(identifier: "SettingBankAccountViewController")
      let settingNavigationController = StoryboardViewControllerResource<SettingNavigationController>(identifier: "SettingNavigationController")
      let settingPushNotificationViewController = StoryboardViewControllerResource<SettingPushNotificationViewController>(identifier: "SettingPushNotificationViewController")
      
      func licenseListViewController(_: Void = ()) -> LicenseListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: licenseListViewController)
      }
      
      func noticeDetailViewController(_: Void = ()) -> NoticeDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noticeDetailViewController)
      }
      
      func noticeListViewController(_: Void = ()) -> NoticeListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noticeListViewController)
      }
      
      func otherViewController(_: Void = ()) -> OtherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otherViewController)
      }
      
      func selectBankAccountViewController(_: Void = ()) -> SelectBankAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectBankAccountViewController)
      }
      
      func setting(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setting)
      }
      
      func settingBankAccountViewController(_: Void = ()) -> SettingBankAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingBankAccountViewController)
      }
      
      func settingNavigationController(_: Void = ()) -> SettingNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingNavigationController)
      }
      
      func settingPushNotificationViewController(_: Void = ()) -> SettingPushNotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingPushNotificationViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tab_others_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_others_active' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_others") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_others' is used in storyboard 'Setting', but couldn't be loaded.") }
        if _R.storyboard.setting().settingNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingNavigationController' could not be loaded from storyboard 'Setting' as 'SettingNavigationController'.") }
        if _R.storyboard.setting().licenseListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'licenseListViewController' could not be loaded from storyboard 'Setting' as 'LicenseListViewController'.") }
        if _R.storyboard.setting().settingPushNotificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingPushNotificationViewController' could not be loaded from storyboard 'Setting' as 'SettingPushNotificationViewController'.") }
        if _R.storyboard.setting().selectBankAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectBankAccountViewController' could not be loaded from storyboard 'Setting' as 'SelectBankAccountViewController'.") }
        if _R.storyboard.setting().noticeDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noticeDetailViewController' could not be loaded from storyboard 'Setting' as 'NoticeDetailViewController'.") }
        if _R.storyboard.setting().setting() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setting' could not be loaded from storyboard 'Setting' as 'SettingViewController'.") }
        if _R.storyboard.setting().otherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otherViewController' could not be loaded from storyboard 'Setting' as 'OtherViewController'.") }
        if _R.storyboard.setting().settingBankAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingBankAccountViewController' could not be loaded from storyboard 'Setting' as 'SettingBankAccountViewController'.") }
        if _R.storyboard.setting().noticeListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noticeListViewController' could not be loaded from storyboard 'Setting' as 'NoticeListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signIn: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignIn"
      let signInNavigationController = StoryboardViewControllerResource<SignInNavigationController>(identifier: "SignInNavigationController")
      
      func signInNavigationController(_: Void = ()) -> SignInNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInNavigationController)
      }
      
      static func validate() throws {
        if _R.storyboard.signIn().signInNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInNavigationController' could not be loaded from storyboard 'SignIn' as 'SignInNavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signUp: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createDogViewController = StoryboardViewControllerResource<CreateDogViewController>(identifier: "CreateDogViewController")
      let name = "SignUp"
      let signUpNavigationController = StoryboardViewControllerResource<SignUpNavigationController>(identifier: "SignUpNavigationController")
      
      func createDogViewController(_: Void = ()) -> CreateDogViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createDogViewController)
      }
      
      func signUpNavigationController(_: Void = ()) -> SignUpNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpNavigationController)
      }
      
      static func validate() throws {
        if _R.storyboard.signUp().signUpNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpNavigationController' could not be loaded from storyboard 'SignUp' as 'SignUpNavigationController'.") }
        if _R.storyboard.signUp().createDogViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createDogViewController' could not be loaded from storyboard 'SignUp' as 'CreateDogViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct task: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Task"
      let taskListViewController = StoryboardViewControllerResource<TaskListViewController>(identifier: "TaskListViewController")
      let taskNavigationController = StoryboardViewControllerResource<TaskNavigationController>(identifier: "TaskNavigationController")
      
      func taskListViewController(_: Void = ()) -> TaskListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: taskListViewController)
      }
      
      func taskNavigationController(_: Void = ()) -> TaskNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: taskNavigationController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tab_task") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_task' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_task_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_task_active' is used in storyboard 'Task', but couldn't be loaded.") }
        if _R.storyboard.task().taskNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'taskNavigationController' could not be loaded from storyboard 'Task' as 'TaskNavigationController'.") }
        if _R.storyboard.task().taskListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'taskListViewController' could not be loaded from storyboard 'Task' as 'TaskListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct webView: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let modalWebViewController = StoryboardViewControllerResource<ModalWebViewController>(identifier: "ModalWebViewController")
      let name = "WebView"
      
      func modalWebViewController(_: Void = ()) -> ModalWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: modalWebViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.webView().modalWebViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'modalWebViewController' could not be loaded from storyboard 'WebView' as 'ModalWebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct welcome: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Welcome"
      let welcomeViewController = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeViewController")
      
      func welcomeViewController(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "welcome") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome' is used in storyboard 'Welcome', but couldn't be loaded.") }
        if _R.storyboard.welcome().welcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'Welcome' as 'WelcomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
